/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.actions;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import hibernate.client.ClientDAOInterface;
import hibernate.config.NMMUMobileDAOManager;
import hibernate.security.SecurityDAOInterface;
import hibernate.user.UserDAOInterface;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import tools.AMSErrorHandler;
import tools.AMSException;
import tools.AMSUtililies;
import common.MessageENT;
import common.PopupENT;
import common.security.RoleENT;
import common.security.RoleLST;

/**
 * MyEclipse Struts Creation date: 09-21-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="reqCode" validate="true"
 * @struts.action-forward name="list" path="/jsp/farsi/news/newsList.jsp"
 */
public class SecurityAction extends Action {
	private static String success = "";
	private static String error = "";
	private String reqCode = "";

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		ActionForward af = null;
		success = "";
		error = "";
		reqCode = request.getParameter("reqCode");
		if (reqCode == null)
			reqCode = "roleManagement";
		if (reqCode.equalsIgnoreCase("deleteRole")) {
			deleteRole(request);
			reqCode = "roleManagement";
		}
		if (reqCode.equalsIgnoreCase("roleManagement")
				|| reqCode.equals("gridJson")) {
			return roleManagement(request, mapping);
		} else if (reqCode.equals("roleEdit")) {
			return editRole(request, mapping, form);
		} else if (reqCode.equals("saveUpdate")) {
			return saveUpdateRole(request, mapping);
		}
		return af;
	}

	private ActionForward saveUpdateRole(HttpServletRequest request,
			ActionMapping mapping) {
		try {
			request.setAttribute("clientENTs", getClientDAO()
					.getClientsDropDown());
		} catch (AMSException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		// /////////////Calls the method getRoleENT>>> press F3 to go to the
		// method definition at the bottom of the class//////////////////
		RoleENT roleENT = getRoleENT(request);
		try {
			roleENT = getSecurityDAO().saveUpdateRole(roleENT);
			success = "The role '" + roleENT.getRoleName()
					+ "' saved successfully";
		} catch (AMSException e) {
			error = AMSErrorHandler.handle(request, this, e, "", "");
		}
		request.setAttribute("roleENT", roleENT);
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("roleEdit");
	}

	private ActionForward editRole(HttpServletRequest request,
			ActionMapping mapping, ActionForm form) {
		RoleENT roleENT = new RoleENT();
		int roleId = 0;
		try {
			// /////////////prepare a client dropdown menu for the roleEdit
			// page//////////////////
			request.setAttribute("clientENTs", getClientDAO()
					.getClientsDropDown());
		} catch (AMSException e) {
			e.printStackTrace();
		}
		// /////////////if no roleID was forwarded then means its a new
		// role, otherwise its about to edit a role//////////////////
		if (request.getParameter("roleID") != null)
			roleId = Integer.parseInt(request.getParameter("roleID"));
		else {
			// /////////////forwards to the page with an empty
			// object//////////////////
			request.setAttribute("roleENT", roleENT);
			return mapping.findForward("roleEdit");
		}
		// /////////////reads the role ID//////////////////
		roleENT.setRoleID(roleId);
		try {
			// /////////////Get the role from DAO and set it into the
			// attribute called roleENT//////////////////
			request.setAttribute("roleENT", getSecurityDAO().getRole(roleENT));
		} catch (AMSException e) {
			error = e.getMessage();
			e.printStackTrace();
		}
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("roleEdit");
	}

	private void deleteRole(HttpServletRequest request) {
		String[] delId = request.getParameter("deleteID").split(",");
		ArrayList<RoleENT> rolesToDelete = new ArrayList<RoleENT>();
		for (int i = 0; i < delId.length; i++) {
			RoleENT role = new RoleENT(Integer.parseInt(delId[i]));
			rolesToDelete.add(role);
		}
		try {
			getSecurityDAO().deleteRoles(rolesToDelete);
			success = "The role(s) removed successfully";
		} catch (AMSException e) {
			e.printStackTrace();
			error = AMSErrorHandler.handle(request, this, e, "", "");
		}
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
	}

	private ActionForward roleManagement(HttpServletRequest request,
			ActionMapping mapping) {
		try {

			createMenusForRole(request);
			// /////////////Prepare data for the list of clients in the drop
			// down menu//////////////////
			request.setAttribute("clientENTs", getClientDAO()
					.getClientsDropDown());
			// /////////////Initiate a value for the page//////////////////
			RoleLST roleLST = getRoleLST(request);
			request.setAttribute("roleLST", roleLST);
			ObjectMapper mapper = new ObjectMapper();
			String json = "";
			try {
				json = mapper.writeValueAsString(roleLST.getRoleENTs());
			} catch (JsonGenerationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JsonMappingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			json = AMSUtililies.prepareTheJSONStringForDataTable(
					roleLST.getCurrentPage(), roleLST.getTotalItems(), json,
					"roleID");
			request.setAttribute("json", json);
			MessageENT m = new MessageENT(success, error);
			request.setAttribute("message", m);
			if (reqCode.equals("gridJson"))
				return mapping.findForward("gridJson");
		} catch (AMSException e) {
			e.printStackTrace();
		}
		// /////////////forward the action to pages >>> see
		// struts.config.xml for more info//////////////////
		return mapping.findForward("roleManagement");
	}

	private void createMenusForRole(HttpServletRequest request) {
		List<PopupENT> popupEnts = new ArrayList<PopupENT>();
		popupEnts.add(new PopupENT("", "displaySearch();", "Show/Hide Search",
				"#"));
		popupEnts.add(new PopupENT("",
				"callAnAction(\"security.do?reqCode=roleEdit\");", "New Role",
				"#"));
		popupEnts.add(new PopupENT("", "deleteSelectedItems();",
				"Delete Selected", "#"));
		List<PopupENT> popupGridEnts = new ArrayList<PopupENT>();
		popupGridEnts
				.add(new PopupENT(
						"",
						"callAnAction(\"security.do?reqCode=roleEdit&roleID=REPLACEME\");",
						"Edit Role", "#"));
		popupGridEnts.add(new PopupENT("",
				"deleteAnItem(REPLACEME, \"deleteRole\");", "Remove", "#")); //
		request.setAttribute("settingMenuItem", popupEnts);
		request.setAttribute("gridMenuItem", popupGridEnts);
	}

	// gets all feilds from the form in the jsp page and instantiate returns an
	// oject, instantiated from class RoleENT
	private RoleENT getRoleENT(HttpServletRequest request) {
		RoleENT roleENT = new RoleENT();
		if (request.getParameter("clientID") != null)
			roleENT.setClientID(Integer.parseInt(request
					.getParameter("clientID")));
		if (request.getParameter("roleID") != null)
			roleENT.setRoleID(Integer.parseInt(request.getParameter("roleID")));
		else
			roleENT.setRoleID(0);
		roleENT.setRoleName(request.getParameter("roleName"));
		roleENT.setComment(request.getParameter("comment"));
		return roleENT;
	}

	// gets all feilds from the form in the jsp page and instantiate returns an
	// oject,
	// instantiated from class RoleLST. There are some information with regard
	// to pagination and filtering the grid
	private RoleLST getRoleLST(HttpServletRequest request) {
		String search = request.getParameter("searchKey");
		if (search == null)
			search = "";

		int pageNo = 1;
		int pageSize = 10;
		int clientID = 0;
		if (request.getParameter("currentPage") != null)
			pageNo = Integer.parseInt(request.getParameter("currentPage"));
		if (request.getParameter("pageSize") != null)
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		if (request.getParameter("clientID") != null
				&& !request.getParameter("clientID").equals(""))
			clientID = Integer.parseInt(request.getParameter("clientID"));
		RoleENT roleENT = new RoleENT(0,search,clientID,"",search);
		RoleLST roleLST = new RoleLST(roleENT,pageNo,pageSize,true,"roleName");
		try {
			roleLST = getSecurityDAO().getRolesList(roleLST);
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return roleLST;
	}

	// /////calls a DAO containg methods for the security management
	private static SecurityDAOInterface getSecurityDAO() {
		return NMMUMobileDAOManager.getSecuirtyDAOInterface();
	}

	// /////calls a DAO containg methods for the client management
	private static ClientDAOInterface getClientDAO() {
		return NMMUMobileDAOManager.getClientDAOInterface();
	}

	private static UserDAOInterface getUserDAO() {
		return NMMUMobileDAOManager.getUserDAOInterface();
	}
}